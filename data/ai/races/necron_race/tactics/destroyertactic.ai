----------------------------------------
-- File: 'destroyertactic.ai'
-- Edited by Thudmeizer	@ 08.10.2016

class 'DestroyerTactic' (NecronVehicleTactic)

Destroyer = {}

function DestroyerTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Destroyer Tactic")

	self.previousPosition = self.squad_ai:GetPosition()
	self.checkTime = g_iGMT
end

function DestroyerTactic:InitAbilities()

	-- Init ability ID's
	if (Destroyer.veil_id == nil) then
		Destroyer.veil_id = cpu_manager.stats:GetAbilityID( "necron_phase_shifter_veil" )
	end
	if (Destroyer.reassemble_id == nil) then
		Destroyer.reassemble_id = cpu_manager.stats:GetAbilityID( "necron_reassemble" )
	end
	if (Destroyer.truegauss_id == nil) then
		Destroyer.truegauss_id = cpu_manager.stats:GetAbilityID( "necron_truegauss" )
	end
end

function DestroyerTactic:DoAbilities()
	
	--Shadow Shifter: Cloaks and disables the squad for several seconds, enabling quick regeneration and recovery from battle.
	-- Infiltrated squad will also receive no damage from incoming attacks (if at all revealed), but cannot attack either.
	if (self.squad_ai:IsInCombat()) then
		if (self.squad_ai:WasRecentlyHurt() and self.squad_ai:GetHealthPercentage() < 0.4) then
			self.squad_ai:DoSpecialAbility(Destroyer.veil_id)
		end
	end

	-- Reassemble: - Reassembles any fallen Necron unit 7m away from the squad at a moderate cost of power.
	if (self.squad_ai:IsInCombat()) then
		-- Reassemble if squad strength is low.
		if (self.squad_ai:CanDoAbility( Destroyer.reassemble_id ) and self.squad_ai:GetNumTroopers() < 3) then
			Ability.DoAbility(self.squad_ai, Destroyer.reassemble_id, Ability.PredicateFilters.HasUsableBodies, { ability_id = Destroyer.reassemble_id, min_bodies = 1 })
		end
	end

	-- Gauss Weapon Overcharge: the squad will receive a boost in maximum damage, but a critical reduction in movement speed for a duration.
	if (self.squad_ai:IsInCombat() and self.squad_ai:GetHealthPercentage() > 0.5) then
		Ability.DoAbilityArea( self.squad_ai, Destroyer.truegauss_id, Ability.Filters.CloseEnemy, 20, 5 )
	end

	-- Jump/Teleport squads' unstuck code call. Checks every 12 secs for stuck squads, and force them to jump nearby.
	self:SolveStuckCase()

	-- Call standard method
	NecronVehicleTactic.DoAbilities(self)
end

function DestroyerTactic:SolveStuckCase()

	if g_iGMT > self.checkTime + 18 and g_iGMT > self.last_jump + 60 then
        self.checkTime = g_iGMT
        	if self:IsSquadStuck() then
            		self:ForceSquadJumpNear(self.squad_ai:GetPosition())
        	end
	end
end

function DestroyerTactic:IsSquadStuck()

	local iPosition = self.squad_ai:GetPosition()
	local iDistance = distance_sqr(iPosition, self.previousPosition)
    	self.previousPosition = iPosition
    	if iDistance > 25 or self.squad_ai:IsInCombat() or self.squad_ai:IsCapturing() then
        	return false
    	end
    	return true
end

function DestroyerTactic:ForceSquadJumpNear(pos)

	-- Try to jump somewhere near, perform 16 checks for a viable position
    	for iLoop1 = 1, 16 do
        	-- Create a jump position
		local vJumpPosition = pos
        	local vDir = cpu_manager:GetDirectionToEnemy(pos)
        	vJumpPosition.x = vJumpPosition.x + vDir.x * math.random(-20, 50)
        	vJumpPosition.z = vJumpPosition.z + vDir.z * math.random(-20, 50)
        	-- Check if target position is in range and if unit is able to jump to target position
        	local iDistance = distance_sqr(vJumpPosition, pos)
        	if iDistance < sqr(self.squad_ai:GetJumpDistance()) and self.squad_ai:CanJumpToPosition(vJumpPosition) then                
            		-- Jump to position
            		self.squad_ai:DoJump(vJumpPosition)
            		self.last_jump = g_iGMT
            		self.m_iLastGatherMove = self.last_jump - 10
            		return
		end
	end
end
